---
- block:
  - name: Load wordpress_sites.yml vars into <env>_sites vars
    include_vars:
      file: group_vars/{{ item }}/wordpress_sites.yml
      name: "{{ item }}_sites"
    loop: "{{ envs_with_wp_sites }}"
    when: envs_with_wp_sites | count > 1

  - name: Fail if there are duplicate site keys within host's wordpress_sites
    fail:
      msg: >
        If you put multiple environments on `{{ inventory_hostname }}`, `wordpress_sites`
        must use different site keys per environment. Adjust the following site keys that
        are duplicated between the `{{ item.env_pair | join('` and `') }}` groups:
          {{ item.site_keys | to_nice_yaml | indent(2) }}
    when: item.site_keys | count
    loop: "{{ site_keys_by_env_pair }}"

  when:
    - env_groups | count > 1
    - validate_site_keys | default(true) | bool

- name: Validate wordpress_sites
  fail:
    msg: "{{ lookup('template', 'wordpress_sites.j2') }}"
  when: wordpress_sites.keys() | difference(vault_wordpress_sites.keys()) | count
  tags: [wordpress]

- name: Validate format of site_hosts
  fail:
    msg: "{{ lookup('template', 'site_hosts.j2') }}"
  loop: "{{ wordpress_sites | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.site_hosts | rejectattr('canonical', 'defined') | list | count
  tags: [letsencrypt, wordpress]

- name: Import PHP version specific vars
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files:
        - '{{ php_version }}.yml'
        - '7.4.yml'
      paths:
        - "{{ playbook_dir }}/roles/php/vars/"

  tags: [php, memcached]

- name: Verify dict format for apt package component variables
  fail:
    msg: "{{ lookup('template', 'package_vars_wrong_format_msg.j2') }}"
  when: package_vars_wrong_format | count
  vars:
    package_vars:
      apt_packages_default: "{{ apt_packages_default }}"
      apt_packages_custom: "{{ apt_packages_custom }}"
      memcached_packages_default: "{{ memcached_packages_default }}"
      memcached_packages_custom: "{{ memcached_packages_custom }}"
      php_extensions_default: "{{ php_extensions_default }}"
      php_extensions_custom: "{{ php_extensions_custom }}"
      sshd_packages_default: "{{ sshd_packages_default }}"
      sshd_packages_custom: "{{ sshd_packages_custom }}"
    package_vars_wrong_format: "[{% for k,v in package_vars.items() | list if v | type_debug != 'dict' %}'{{ k }}',{% endfor %}]"
  tags: [sshd, memcached, php]

- name: Verify dict format for apt package combined variables
  fail:
    msg: "{{ lookup('template', 'package_vars_wrong_format_msg.j2') }}"
  when: package_vars_wrong_format | count
  vars:
    package_vars:
      apt_packages: "{{ apt_packages }}"
      memcached_packages: "{{ memcached_packages }}"
      php_extensions: "{{ php_extensions }}"
      sshd_packages: "{{ sshd_packages }}"
    package_vars_wrong_format: "[{% for k,v in package_vars.items() | list if v | type_debug != 'dict' %}'{{ k }}',{% endfor %}]"
  tags: [sshd, memcached, php]

- name: Validate Ubuntu version
  debug:
    msg: |
      Ubuntu 18.04 Bionic is the minimum supported version of Ubuntu in Trellis 1.0+ (as of https://github.com/roots/trellis/pull/992)

      20.04 Focal is the recommend version for Trellis 1.7+ (as of https://github.com/roots/trellis/pull/1197)

      Your Ubuntu version is {{ ansible_distribution_version }} {{ ansible_distribution_release }}

      We recommend you re-create your server to get the best experience.

      Note: both of these methods will delete all your existing data. It's up to you to backup what's needed and restore it.

      Development via Vagrant: `vagrant destroy && vagrant up`

      Staging/Production: Create a new server with Ubuntu 20.04 and provision
  when: ansible_distribution_version is version('18.04', '<')

- name: Check whether passlib is needed
  fail:
    msg: |
      Ansible on macOS requires Python's passlib module to create user password hashes

      If you're seeing this error message, you likely didn't use trellis-cli to create your project.
      We highly recommend installing and using trellis-cli to manage your Trellis projects.

      See https://github.com/roots/trellis-cli for more documentation.

      For existing projects, you can run `trellis init` which will manage the dependencies automatically and fix this problem
      as long as you use the `trellis` commands (like `trellis provision`) afterwards.

      To fix this manually, use pip to install the package: pip install passlib

      If pip is not installed, you'll have to install it first.
      See https://stackoverflow.com/questions/17271319/how-do-i-install-pip-on-macos-or-os-x for many options.

  when: env != 'development' and darwin_without_passlib | default(false)
  run_once: true

- name: Retrieve local SSH client's settings per host
  set_fact:
    ssh_client_ciphers: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep ciphers') }}"
    ssh_client_kex: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep kexalgorithms') }}"
    ssh_client_macs: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep macs') }}"
    ssh_client_host_key_algorithms: "{{ lookup('pipe', 'ssh -ttG ' + ansible_host + ' | grep hostkeyalgorithms') }}"
  when: openssh_6_8_plus and validate_ssh | default(true)
  tags: [sshd]

- name: Validate compatible settings between SSH client and server
  assert:
    that:
      - overlapping_ciphers | count
      - overlapping_kex | count
      - overlapping_macs | count
      - overlapping_host_keys | count
    msg: "{{ lookup('template', 'validate_ssh_msg.j2') }}"
  when: openssh_6_8_plus and validate_ssh | default(true)
  tags: [sshd]

- name: Update apt packages
  apt:
    update_cache: yes

- name: Checking essentials
  apt:
    name: "{{ item.key }}"
    state: "{{ item.value }}"
    cache_valid_time: "{{ apt_cache_valid_time }}"
  loop: "{{ apt_packages | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Validate timezone variable
  stat:
    path: /usr/share/zoneinfo/{{ ntp_timezone }}
  register: timezone_path
  changed_when: false

- name: Explain timezone error
  fail:
    msg: "{{ ntp_timezone }} is not a valid timezone. For a list of valid timezones, check https://php.net/manual/en/timezones.php"
  when: not timezone_path.stat.exists

- name: Add myhostname to nsswitch.conf to ensure resolvable hostname
  lineinfile:
    backrefs: yes
    backup: yes
    dest: /etc/nsswitch.conf
    line: \1 myhostname
    regexp: ^(hosts\:((?!myhostname).)*)$
    state: present

- name: Generate SSH key for vagrant user for ansible_local provisioning
  user:
    name: "{{ ansible_user }}"
    generate_ssh_key: yes
  when: vagrant_local_provisioning | default(false)

- block:
    - name: Retrieve SSH client IP
      ipify_facts:
      delegate_to: localhost
      become: no
      when: env != 'development' and ssh_client_ip_lookup | default(true)
      tags: [fail2ban, ferm]
  rescue:
    - name: Fail when unable to retrieve SSH client IP
      fail:
        msg: "External IP resolution failed. Check that your DNS servers are working. Try to disable DNSCrypt if you are using it."

- name: Restrict journal log size
  lineinfile:
    backup: yes
    dest: /etc/systemd/journald.conf
    insertafter: "^[Journal]"
    line: "SystemMaxUse={{ max_journal_size }}"
    regexp: "^#?(SystemMaxUse=.*?)$"
    state: present
  notify: restart journald
