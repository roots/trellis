---
- name: Create Nginx conf for challenges location
  template:
    src: acme-challenge-location.conf.j2
    dest: "{{ nginx_path }}/acme-challenge-location.conf"
    mode: '0644'

- name: Get list of hosts in current Nginx conf
  shell: |
    [ ! -f {{ nginx_path }}/sites-enabled/{{ item.key }}.conf ] ||
    sed -n -e "/listen 80/,/server_name/{s/server_name \(.*\);/\1/p}" {{ nginx_path }}/sites-enabled/{{ item.key }}.conf
  register: current_hosts
  changed_when: false
  when: site_uses_letsencrypt
  loop: "{{ wordpress_sites | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create needed Nginx confs for challenges
  template:
    src: nginx-challenge-site.conf.j2
    dest: "{{ nginx_path }}/sites-available/letsencrypt-{{ item.key }}.conf"
    mode: '0644'
  register: challenge_site_confs
  when:
    - site_uses_letsencrypt
    - missing_hosts | count > 0
  loop: "{{ wordpress_sites | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Enable Nginx sites
  file:
    src: "{{ nginx_path }}/sites-available/letsencrypt-{{ item.key }}.conf"
    dest: "{{ nginx_path }}/sites-enabled/letsencrypt-{{ item.key }}.conf"
    state: link
  register: challenge_sites_enabled
  when:
    - site_uses_letsencrypt
    - missing_hosts | count > 0
  loop: "{{ wordpress_sites | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  notify: disable temporary challenge sites

- import_tasks: "{{ playbook_dir }}/roles/common/tasks/reload_nginx.yml"
  when: challenge_site_confs is changed or challenge_sites_enabled is changed

- name: Create test Acme Challenge file
  file:
    path: "{{ acme_tiny_challenges_directory }}/ping.txt"
    state: touch
    mode: '0644'

- name: Test Acme Challenges
  test_challenges:
    hosts: "{{ site_hosts }}"
  register: letsencrypt_test_challenges
  ignore_errors: true
  when: site_uses_letsencrypt
  loop: "{{ wordpress_sites | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Notify of challenge failures
  fail:
    msg: >
      Could not access the challenge file for the hosts/domains: {{ item.failed_hosts | join(', ') }}.
      Let's Encrypt requires every domain/host be publicly accessible.
      Make sure that a valid DNS record exists for {{ item.failed_hosts | join(', ') }} and that they point to this server's IP.
      If you don't want these domains in your SSL certificate, then remove them from `site_hosts`.
      See https://roots.io/trellis/docs/ssl for more details.
  when: item is not skipped and item is failed
  loop: "{{ letsencrypt_test_challenges.results }}"
